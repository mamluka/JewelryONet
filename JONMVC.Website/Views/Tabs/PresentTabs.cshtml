@using JONMVC.Website.ViewModels.Views
@model TabsViewModel
@{
    ViewBag.Title = @Model.Title;

    Layout = "~/Views/Shared/_Layout.cshtml";

    var sectionDic = new Dictionary<string, string>
                         {
                             {"diamond-rings", "DiamondJewelryMenu"},
                             {"gemstone-rings", "GemstoneJewelryMenu"},
                             {"wedding-and-anniversary", "WeddingAndWnniversaryMenu"},
                             {"engagement-rings", "EngagementRings"}
                         };
}
@section PathBar {
    @Html.Partial("PathBar", Model.PathBarItems)
}
@{
    if (sectionDic.ContainsKey(Model.TabKey))
    {
        DefineSection(sectionDic[Model.TabKey], () => Write(Html.Partial("TabsSubMenu", sectionDic[Model.TabKey])));
    }
}
@using (Html.BeginForm("SearchTabsPost", "Tabs"))
{
    <div class="table">
        @Html.Partial("NavigationTabStrip", Model)
        <div class="row">
            <div class="cell">
                <div id="ItemContainer">
                    <div class="block sortbar">
                        @Html.LabelFor(x => x.OrderByPrice)
                        @Html.DropDownListFor(m => m.OrderByPrice, new SelectList(Model.OrderByPriceItems, "Value", "Key", Model.OrderByPrice.ToString()))
                        @Html.LabelFor(x => x.MetalFilter)
                        @Html.DropDownListFor(m => m.MetalFilter, new SelectList(Model.MetalFilterItems, "Value", "Key", Model.MetalFilterItems.ToString()))
                        @Html.HiddenFor(m => m.Page)
                        @Html.HiddenFor(m => m.ItemsPerPage)
                        @Html.HiddenFor(m => m.TabId)
                        @Html.HiddenFor(m => m.TabKey)
                        @for (int i = 0; i < Model.CustomFilters.Count; i++)
                        {
                            @Html.Label(Model.CustomFilters[i].Label)
                            @Html.DropDownListFor(m => m.CustomFilters[i].Value, new SelectList(Model.CustomFilters[0].Values, "Value", "Key", Model.MetalFilterItems.ToString()))
                            @Html.HiddenFor(m => m.CustomFilters[i].Name)
                        }
                        <div class="pages right">
                            <ul>
                                @{
                        var dic = new RouteValueDictionary
                                              {
                                                  {"tabkey", Model.TabKey},
                                                  {"tabid", Model.TabId},
                                                  
                                                  {"MetalFilter", Model.MetalFilter},
                                                  {"OrderByPrice", Model.OrderByPrice},
                                                  {"itemsperpage", Model.ItemsPerPage}

                                              };

                        var counter = 0;
                        if (Model.CustomFilters != null)
                        {
                            foreach (var filterValue in Model.CustomFilters)
                            {
                                //TODO do tis strongly typed with reflaction
                                dic.Add("CustomFilters" + "[" + counter.ToString() + "].Value", filterValue.Value);
                                dic.Add("CustomFilters" + "[" + counter.ToString() + "].Name", filterValue.Name);
                                counter++;
                            }

                        }
                                
                              
                                              
                                }
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    dic["page"] = i;
                                    if (i == Model.Page)
                                    {

                                       
                                    <li class="active">@Html.RouteLink(i.ToString(), "Tabs", dic)</li>


                                    }
                                    else
                                    {


                                    <li>@Html.RouteLink(i.ToString(), "Tabs", dic) </li>


                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="cell">
                <div id="ItemDisplay">
                    @foreach (var jewelInTabContainer in Model.JewelryInTabContainersCollection)
                    {
                        @Html.Partial(Model.InTabPartialView, jewelInTabContainer)
                        
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="cell">
                <div id="ItemContainer">
                    <div class="block sortbar">
                        @* @Html.DropDownListFor(m => m.OrderByPrice, Model.OrderByPriceItems)
				
						   @Html.DropDownListFor(m => m.MetalFilter, Model.MetalFilterItems) *@
                        <div class="pages right">
                            <ul>
                                @{
                    var dic = new RouteValueDictionary
                                              {
                                                  {"tabkey", Model.TabKey},
                                                  {"tabid", Model.TabId},
                                                  
                                                  {"MetalFilter", Model.MetalFilter},
                                                  {"OrderByPrice", Model.OrderByPrice},
                                                  {"itemsperpage", Model.ItemsPerPage}

                                              };

                    var counter = 0;
                    if (Model.CustomFilters != null)
                    {
                        foreach (var filterValue in Model.CustomFilters)
                        {
                            //TODO do tis strongly typed with reflaction
                            dic.Add("CustomFilters" + "[" + counter.ToString() + "].Value", filterValue.Value);
                            dic.Add("CustomFilters" + "[" + counter.ToString() + "].Name", filterValue.Name);
                            counter++;
                        }

                    }
                                
                              
                                              
                                }
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    dic["page"] = i;
                                    if (i == Model.Page)
                                    {

                                       
                                    <li class="active">@Html.RouteLink(i.ToString(), "Tabs", dic)</li>


                                    }
                                    else
                                    {


                                    <li>@Html.RouteLink(i.ToString(), "Tabs", dic) </li>


                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="cell">
                <h1>@Model.ShortTitle</h1>
                <p class="text-below-page">@Html.Raw(Model.ExtraText)</p>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    Tabs.RegisterFilters();
    Tabs.RegisterTabLinks();
    Tabs.RegisterTabsMouseOver();
    MetalPriceSelect.RegisterMetalPriceSelectForTabs();
    Video.RegisterHooks();
</script>
